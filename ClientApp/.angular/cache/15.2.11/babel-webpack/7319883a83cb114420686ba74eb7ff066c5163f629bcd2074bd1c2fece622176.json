{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nlet ProgramManageComponent = class ProgramManageComponent {\n  constructor(http, cdr, snackBar, fb) {\n    this.http = http;\n    this.cdr = cdr;\n    this.snackBar = snackBar;\n    this.fb = fb;\n    this.isSpecialSelected = false;\n    this.isSPM = false;\n    this.isSTPM = false;\n    this.isMatriculation = false;\n    this.isDiploma = false;\n    this.displayedColumns = ['graduate_type', 'requirement', 'grade', 'action'];\n    this.displayedCourseColumns = ['category', 'subjectName', 'actions'];\n    this.generalRequirement = new MatTableDataSource([]);\n    this.selectedFaculty = null;\n    this.selectedFacultyDropdown = null;\n    this.selectedProgramCode = null;\n    this.specialRequirements = {};\n    this.editingRowIndex = null;\n    this.updatedGrade = null;\n    this.editingSpecialRowIndex = null;\n    this.updatedSpecialGrade = null;\n    this.isCreateModalOpen = false;\n    this.errorMessage = '';\n    this.programs = {};\n    this.faculties = [];\n    this.categories = [];\n    this.subjects = [];\n    this.selectedCategory = '';\n    this.selectedSubject = '';\n    this.selectedGrade = '';\n    this.grades = [];\n    this.spmGrades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"C\"];\n    this.otherGrades = [\"4.00\", \"3.67\", \"3.33\", \"3.00\", \"2.67\"];\n    this.muetGrades = [\"5.5\", \"5.0\", \"4.0\", \"3.0\", \"2.0\", \"1.0\"];\n    this.isSubjectModalOpen = false;\n    this.showSubjects = false;\n    this.sortedSubjects = [];\n    this.selectedSubjectId = null;\n    this.getGeneralRequirement();\n    this.createForm = this.fb.group({\n      graduate_type: ['', Validators.required],\n      requirement_type: ['', Validators.required],\n      grade: ['', Validators.required],\n      subject: ['', Validators.required],\n      faculty: [''],\n      program_code: ['']\n    });\n    this.createForm.get('type')?.valueChanges.subscribe(value => {\n      this.isSpecialSelected = value === 'special';\n      this.isSPM = value === 'SPM';\n    });\n    this.subjectForm = this.fb.group({\n      category: ['', Validators.required],\n      subjectName: ['', Validators.required]\n    });\n    this.fetchCourses();\n    this.fetchFaculties();\n    this.fetchCategories();\n    this.fetchAllSubjects();\n  }\n  openSubjectModal() {\n    this.isSubjectModalOpen = true;\n    this.subjectForm.reset();\n  }\n  closeSubjectModal() {\n    this.isSubjectModalOpen = false;\n    this.subjectForm.reset();\n  }\n  saveSubject() {\n    if (this.subjectForm.invalid) return;\n    const subjectData = this.subjectForm.value;\n    this.http.post('https://localhost:7108/api/Course/subjects', subjectData).subscribe(() => {\n      this.snackBar.open('Subject added successfully!', 'Close', {\n        duration: 2000\n      });\n      this.fetchAllSubjects();\n      this.closeSubjectModal();\n    }, error => console.error('Error adding subject:', error));\n  }\n  deleteSubject(subjectId) {\n    if (!window.confirm('Are you sure you want to delete this subject?')) return;\n    this.http.delete(`https://localhost:7108/api/Course/subjects/${subjectId}`).subscribe(() => {\n      this.snackBar.open('Subject deleted successfully!', 'Close', {\n        duration: 2000\n      });\n      this.fetchAllSubjects();\n    }, error => console.error('Error deleting subject:', error));\n  }\n  fetchCategories() {\n    this.http.get('https://localhost:7108/api/Course/categories').subscribe(response => {\n      this.categories = response;\n    }, error => {\n      console.error('Error fetching categories:', error);\n    });\n  }\n  sortSubjects() {\n    this.sortedSubjects = [...this.subjects].sort((a, b) => a.category.localeCompare(b.category));\n  }\n  toggleViewSubjects() {\n    this.showSubjects = !this.showSubjects;\n    if (this.showSubjects) {\n      this.sortSubjects();\n    }\n  }\n  fetchAllSubjects() {\n    this.http.get('https://localhost:7108/api/Course/subjects').subscribe(response => {\n      this.subjects = response;\n    }, error => {\n      console.error('Error fetching subjects:', error);\n    });\n  }\n  fetchSubjects(category) {\n    this.http.get(`https://localhost:7108/api/Course/subjects/${category}`).subscribe(response => {\n      this.subjects = response;\n    }, error => {\n      console.error('Error fetching subjects:', error);\n    });\n  }\n  onCategoryChange() {\n    if (this.selectedCategory) {\n      this.fetchSubjects(this.selectedCategory);\n      this.selectedSubject = '';\n      this.setGradeOptions();\n    }\n  }\n  onSubjectChange() {\n    this.setGradeOptions();\n  }\n  setGradeOptions() {\n    if (this.selectedCategory === 'SPM') {\n      this.grades = this.spmGrades;\n    } else if (this.selectedSubject === 'MUET') {\n      this.grades = this.muetGrades;\n    } else {\n      this.grades = this.otherGrades;\n    }\n  }\n  fetchCourses() {\n    this.http.get('https://localhost:7108/api/Course/courses').subscribe(response => {\n      this.programs = response;\n    }, error => {\n      console.error('Error fetching courses:', error);\n    });\n  }\n  fetchFaculties() {\n    this.http.get('https://localhost:7108/api/Course/faculties').subscribe(response => {\n      this.faculties = response;\n    }, error => {\n      console.error('Error fetching faculties:', error);\n    });\n  }\n  getGeneralRequirement() {\n    this.http.get('https://localhost:7108/api/EntryRequirement/general').subscribe(res => {\n      this.generalRequirement = new MatTableDataSource(res);\n      if (this.sort) {\n        this.generalRequirement.sort = this.sort;\n      }\n      this.cdr.detectChanges();\n    });\n  }\n  ngAfterViewInit() {\n    if (this.sort) {\n      this.generalRequirement.sort = this.sort;\n    }\n  }\n  getSpecialRequirements(programCode) {\n    this.http.get(`https://localhost:7108/api/EntryRequirement/special/${programCode}`).subscribe(data => {\n      this.specialRequirements[programCode] = data;\n      this.cdr.detectChanges();\n    });\n  }\n  startEditing(rowIndex, currentGrade) {\n    this.editingRowIndex = rowIndex;\n    this.updatedGrade = currentGrade;\n  }\n  saveChanges(rowIndex) {\n    const row = this.generalRequirement.data[rowIndex];\n    const updatedRequirement = {\n      id: row.id,\n      grade: this.updatedGrade,\n      subject: row.subject,\n      requirement_type: row.requirement_type,\n      graduate_type: row.graduate_type\n    };\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${row.id}`, updatedRequirement).subscribe(res => {\n      console.log('Update successful:', res);\n      this.snackBar.open('Grade edited successfully!', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      this.generalRequirement.data[rowIndex].grade = this.updatedGrade;\n      this.editingRowIndex = null;\n      this.updatedGrade = null;\n      console.log(this.editingRowIndex, this.updatedGrade);\n      this.cdr.markForCheck();\n    }, err => {\n      console.error('Update failed:', err);\n    });\n  }\n  startEditingSpecial(programCode, rowIndex, currentGrade) {\n    this.editingSpecialRowIndex = rowIndex;\n    this.updatedSpecialGrade = currentGrade;\n  }\n  saveSpecialChanges(programCode, rowIndex) {\n    const specialRequirement = this.specialRequirements[programCode][rowIndex];\n    const updatedRequirement = {\n      ...specialRequirement,\n      grade: this.updatedSpecialGrade\n    };\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${specialRequirement.id}`, updatedRequirement).subscribe(res => {\n      console.log('Special Requirement Update Successful:', res);\n      this.snackBar.open('Grade edited successfully!', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      if (this.updatedSpecialGrade !== null) {\n        this.specialRequirements[programCode][rowIndex].grade = this.updatedSpecialGrade;\n      }\n      this.editingSpecialRowIndex = null;\n      this.updatedSpecialGrade = null;\n      this.cdr.markForCheck();\n    }, err => {\n      console.error('Update failed:', err);\n    });\n  }\n  confirmDelete(id, programCode) {\n    const confirmResult = window.confirm(\"Are you sure you want to delete this entry?\");\n    if (confirmResult) {\n      this.deleteEntryRequirement(id, programCode);\n    }\n  }\n  deleteEntryRequirement(id, programCode) {\n    this.http.delete(`https://localhost:7108/api/EntryRequirement/delete/${id}`, {\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Delete successful:', response);\n      this.generalRequirement.data = this.generalRequirement.data.filter(item => item.id !== id);\n      if (programCode) {\n        this.specialRequirements[programCode] = this.specialRequirements[programCode].filter(item => item.id !== id);\n      }\n      this.snackBar.open('Entry requirement deleted successfully!', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      this.cdr.detectChanges();\n    }, error => {\n      console.error('Delete failed:', error);\n      this.snackBar.open('Failed to delete entry requirement.', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n    });\n  }\n  openCreateModal() {\n    this.isCreateModalOpen = true;\n  }\n  closeCreateModal() {\n    this.isCreateModalOpen = false;\n    this.createForm.reset();\n  }\n  submitEntry() {\n    if (this.createForm.invalid) {\n      return;\n    }\n    const formData = this.createForm.value;\n    this.http.post('https://localhost:7108/api/EntryRequirement/create', formData).subscribe(response => {\n      console.log('Form submitted successfully!', response);\n      this.snackBar.open('Form submitted successfully!', 'Close', {\n        duration: 3000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      this.closeCreateModal();\n      this.getGeneralRequirement();\n      this.getSpecialRequirements(formData.program_code);\n    }, error => {\n      console.error('Error submitting the form:', error);\n      // Check if the error is a constraint violation (duplicate graduate_type + requirement_type)\n      if (error.status === 409) {\n        this.errorMessage = error.error; // Set the error message from the backend\n      } else {\n        this.errorMessage = 'An error occurred while submitting the form.';\n      }\n    });\n  }\n  // Method to change behavior when type is selected as 'special'\n  onTypeChange(event) {\n    if (event.value === 'special') {\n      this.isSpecialSelected = true;\n    } else {\n      this.isSpecialSelected = false;\n    }\n  }\n  onTypeChangeSubject(event) {\n    this.isSPM = event.value === 'SPM';\n    this.isSTPM = event.value === 'STPM';\n    this.isDiploma = event.value === 'Diploma';\n    this.isMatriculation = event.value === 'Matriculation';\n  }\n  clearFilter() {\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n  }\n  getProgramsForFaculty() {\n    return this.selectedFaculty ? this.programs[this.selectedFaculty] : [];\n  }\n  getProgramsForFacultyDropdown() {\n    const faculty = this.createForm.value.faculty;\n    return this.programs[faculty] || [];\n  }\n  selectProgram(programCode) {\n    this.selectedProgramCode = programCode;\n    this.getSpecialRequirements(programCode);\n  }\n  getCategoryClass(category) {\n    switch (category) {\n      case 'SPM':\n        return 'spm-tag';\n      case 'STPM':\n        return 'stpm-tag';\n      // case 'MUET':\n      //   return 'muet-tag';\n      case 'Diploma':\n        return 'diploma-tag';\n      case 'Matriculation':\n        return 'matriculation-tag';\n      default:\n        return '';\n    }\n  }\n};\n__decorate([ViewChild(MatSort, {\n  static: false\n})], ProgramManageComponent.prototype, \"sort\", void 0);\nProgramManageComponent = __decorate([Component({\n  selector: 'app-program-manage',\n  standalone: true,\n  imports: [CommonModule, MatTableModule, MatSortModule, MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule, MatIconModule, MatExpansionModule, MatButtonModule, MatSnackBarModule, ReactiveFormsModule, MatChipsModule, MatBadgeModule],\n  templateUrl: './program-manage.component.html',\n  styleUrls: ['./program-manage.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], ProgramManageComponent);\nexport { ProgramManageComponent };","map":{"version":3,"mappings":"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","names":["CommonModule","ChangeDetectionStrategy","Component","ViewChild","FormsModule","ReactiveFormsModule","Validators","MatBadgeModule","MatButtonModule","MatChipsModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatSelectModule","MatSnackBarModule","MatSort","MatSortModule","MatTableDataSource","MatTableModule","ProgramManageComponent","constructor","http","cdr","snackBar","fb","getGeneralRequirement","createForm","group","graduate_type","required","requirement_type","grade","subject","faculty","program_code","get","valueChanges","subscribe","value","isSpecialSelected","isSPM","subjectForm","category","subjectName","fetchCourses","fetchFaculties","fetchCategories","fetchAllSubjects","openSubjectModal","isSubjectModalOpen","reset","closeSubjectModal","saveSubject","invalid","subjectData","post","open","duration","error","console","deleteSubject","subjectId","window","confirm","delete","response","categories","sortSubjects","sortedSubjects","subjects","sort","a","b","localeCompare","toggleViewSubjects","showSubjects","fetchSubjects","onCategoryChange","selectedCategory","selectedSubject","setGradeOptions","onSubjectChange","grades","spmGrades","muetGrades","otherGrades","programs","faculties","res","generalRequirement","detectChanges","ngAfterViewInit","getSpecialRequirements","programCode","data","specialRequirements","startEditing","rowIndex","currentGrade","editingRowIndex","updatedGrade","saveChanges","row","updatedRequirement","id","put","log","horizontalPosition","verticalPosition","markForCheck","err","startEditingSpecial","editingSpecialRowIndex","updatedSpecialGrade","saveSpecialChanges","specialRequirement","confirmDelete","confirmResult","deleteEntryRequirement","responseType","filter","item","openCreateModal","isCreateModalOpen","closeCreateModal","submitEntry","formData","status","errorMessage","onTypeChange","event","onTypeChangeSubject","isSTPM","isDiploma","isMatriculation","clearFilter","selectedFaculty","selectedProgramCode","getProgramsForFaculty","getProgramsForFacultyDropdown","selectProgram","getCategoryClass","__decorate","static","selector","standalone","imports","templateUrl","styleUrls","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\jessm\\OneDrive\\Desktop\\work\\FYP\\sam\\ClientApp\\src\\app\\program-manage\\program-manage.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\n\nexport interface Faculty {\n  facultyCode: string;\n  faculty: string;\n}\n\nexport interface Program {\n  code: string;\n  name: string;\n}\n\ninterface Subject {\n  id: number;\n  category: string;\n  subjectName: string;\n}\n\nexport interface SpecialEntryRequirement {\n  id: number;\n  category: string;\n  requirement: string;\n  grade: string;\n}\n\n\n@Component({\n  selector: 'app-program-manage',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    FormsModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    ReactiveFormsModule,\n    MatChipsModule,\n    MatBadgeModule\n  ],\n  templateUrl: './program-manage.component.html',\n  styleUrls: ['./program-manage.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgramManageComponent implements AfterViewInit {\n  constructor(private http: HttpClient,\n    private cdr: ChangeDetectorRef,\n    private snackBar: MatSnackBar,\n    private fb: FormBuilder\n\n  ) {\n    this.getGeneralRequirement();\n    this.createForm = this.fb.group({\n      graduate_type: ['', Validators.required],\n      requirement_type: ['', Validators.required],\n      grade: ['', Validators.required],\n      subject: ['', Validators.required],\n      faculty: [''],\n      program_code: [''],\n    });\n    this.createForm.get('type')?.valueChanges.subscribe(value => {\n      this.isSpecialSelected = value === 'special';\n      this.isSPM = value === 'SPM';\n    });\n    this.subjectForm = this.fb.group({\n      category: ['', Validators.required],\n      subjectName: ['', Validators.required]\n    });\n    this.fetchCourses();\n    this.fetchFaculties();\n    this.fetchCategories();\n    this.fetchAllSubjects();\n  }\n  createForm: FormGroup;\n  isSpecialSelected: boolean = false;\n  isSPM: boolean = false;\n  isSTPM: boolean = false;\n  isMatriculation: boolean = false;\n  isDiploma: boolean = false;\n  displayedColumns: string[] = ['graduate_type', 'requirement', 'grade', 'action'];\n  displayedCourseColumns = ['category', 'subjectName', 'actions'];\n\n  generalRequirement: MatTableDataSource<any> = new MatTableDataSource<any>([]);\n  selectedFaculty: string | null = null;\n  selectedFacultyDropdown: string | null = null;\n  selectedProgramCode: string | null = null;\n  specialRequirements: { [programCode: string]: SpecialEntryRequirement[] } = {};\n  editingRowIndex: number | null = null;\n  updatedGrade: string | null = null;\n  editingSpecialRowIndex: number | null = null;\n  updatedSpecialGrade: string | null = null;\n  isCreateModalOpen: boolean = false;\n  errorMessage: string = '';\n  programs: { [key: string]: Program[] } = {};\n  faculties: Faculty[] = [];\n  categories: string[] = [];\n  subjects: Subject[] = [];\n  selectedCategory: string = '';\n  selectedSubject: string = '';\n  selectedGrade: string = '';\n  grades: string[] = [];\n  spmGrades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"C\"];\n  otherGrades = [\"4.00\", \"3.67\", \"3.33\", \"3.00\", \"2.67\"];\n  muetGrades = [\"5.5\", \"5.0\", \"4.0\", \"3.0\", \"2.0\", \"1.0\"];\n  isSubjectModalOpen: boolean = false;\n  showSubjects: boolean = false;\n  subjectForm: FormGroup;\n  sortedSubjects: Subject[] = [];\n  selectedSubjectId: number | null = null;\n\n\n  openSubjectModal() {\n    this.isSubjectModalOpen = true;\n    this.subjectForm.reset();\n  }\n\n  closeSubjectModal() {\n    this.isSubjectModalOpen = false;\n    this.subjectForm.reset();\n  }\n\n  saveSubject(): void {\n    if (this.subjectForm.invalid) return;\n\n    const subjectData: Subject = this.subjectForm.value;\n\n    this.http.post('https://localhost:7108/api/Course/subjects', subjectData)\n      .subscribe(() => {\n        this.snackBar.open('Subject added successfully!', 'Close', { duration: 2000 });\n        this.fetchAllSubjects();\n        this.closeSubjectModal();\n      }, error => console.error('Error adding subject:', error));\n  }\n\n  deleteSubject(subjectId: number): void {\n    if (!window.confirm('Are you sure you want to delete this subject?')) return;\n\n    this.http.delete(`https://localhost:7108/api/Course/subjects/${subjectId}`)\n      .subscribe(() => {\n        this.snackBar.open('Subject deleted successfully!', 'Close', { duration: 2000 });\n        this.fetchAllSubjects();\n      }, error => console.error('Error deleting subject:', error));\n  }\n\n  fetchCategories(): void {\n    this.http.get<string[]>('https://localhost:7108/api/Course/categories')\n      .subscribe(response => {\n        this.categories = response;\n      }, error => {\n        console.error('Error fetching categories:', error);\n      });\n  }\n  sortSubjects(): void {\n    this.sortedSubjects = [...this.subjects].sort((a, b) => a.category.localeCompare(b.category));\n  }\n\n  toggleViewSubjects(): void {\n    this.showSubjects = !this.showSubjects;\n    if (this.showSubjects) {\n      this.sortSubjects();\n    }\n  }\n\n  fetchAllSubjects(): void {\n    this.http.get<Subject[]>('https://localhost:7108/api/Course/subjects')\n      .subscribe(response => {\n        this.subjects = response;\n      }, error => {\n        console.error('Error fetching subjects:', error);\n      });\n  }\n\n  fetchSubjects(category: string): void {\n    this.http.get<Subject[]>(`https://localhost:7108/api/Course/subjects/${category}`)\n      .subscribe(response => {\n        this.subjects = response;\n      }, error => {\n        console.error('Error fetching subjects:', error);\n      });\n  }\n\n  onCategoryChange(): void {\n    if (this.selectedCategory) {\n      this.fetchSubjects(this.selectedCategory);\n      this.selectedSubject = '';\n      this.setGradeOptions();\n    }\n  }\n\n  onSubjectChange(): void {\n    this.setGradeOptions();\n  }\n\n  setGradeOptions(): void {\n    if (this.selectedCategory === 'SPM') {\n      this.grades = this.spmGrades;\n    } else if (this.selectedSubject === 'MUET') {\n      this.grades = this.muetGrades;\n    } else {\n      this.grades = this.otherGrades;\n    }\n  }\n\n  fetchCourses(): void {\n    this.http.get<{ [key: string]: Program[] }>('https://localhost:7108/api/Course/courses')\n      .subscribe(response => {\n        this.programs = response;\n      }, error => {\n        console.error('Error fetching courses:', error);\n      });\n  }\n\n  fetchFaculties(): void {\n    this.http.get<Faculty[]>('https://localhost:7108/api/Course/faculties')\n      .subscribe(response => {\n        this.faculties = response;\n      }, error => {\n        console.error('Error fetching faculties:', error);\n      });\n  }\n\n  getGeneralRequirement() {\n    this.http.get('https://localhost:7108/api/EntryRequirement/general')\n      .subscribe((res: any) => {\n        this.generalRequirement = new MatTableDataSource(res);\n        if (this.sort) {\n          this.generalRequirement.sort = this.sort;\n        }\n        this.cdr.detectChanges();\n      });\n  }\n\n  @ViewChild(MatSort, { static: false }) sort: MatSort | undefined;\n  ngAfterViewInit() {\n    if (this.sort) {\n      this.generalRequirement.sort = this.sort;\n    }\n  }\n\n\n  getSpecialRequirements(programCode: string) {\n    this.http.get<SpecialEntryRequirement[]>(`https://localhost:7108/api/EntryRequirement/special/${programCode}`)\n      .subscribe((data) => {\n        this.specialRequirements[programCode] = data;\n        this.cdr.detectChanges();\n      });\n  }\n\n  startEditing(rowIndex: number, currentGrade: string) {\n    this.editingRowIndex = rowIndex;\n    this.updatedGrade = currentGrade;\n  }\n\n  saveChanges(rowIndex: number) {\n    const row = this.generalRequirement.data[rowIndex];\n    const updatedRequirement = {\n      id: row.id,\n      grade: this.updatedGrade,\n      subject: row.subject,\n      requirement_type: row.requirement_type,\n      graduate_type: row.graduate_type,\n    };\n\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${row.id}`, updatedRequirement).subscribe(\n      (res) => {\n        console.log('Update successful:', res);\n        this.snackBar.open('Grade edited successfully!', 'Close', {\n          duration: 2000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n        });\n        this.generalRequirement.data[rowIndex].grade = this.updatedGrade;\n        this.editingRowIndex = null;\n        this.updatedGrade = null;\n        console.log(this.editingRowIndex, this.updatedGrade);\n        this.cdr.markForCheck();\n      },\n      (err) => {\n        console.error('Update failed:', err);\n      }\n    );\n  }\n\n  startEditingSpecial(programCode: string, rowIndex: number, currentGrade: string) {\n    this.editingSpecialRowIndex = rowIndex;\n    this.updatedSpecialGrade = currentGrade;\n  }\n\n  saveSpecialChanges(programCode: string, rowIndex: number) {\n    const specialRequirement = this.specialRequirements[programCode][rowIndex];\n    const updatedRequirement = {\n      ...specialRequirement,\n      grade: this.updatedSpecialGrade,\n    };\n\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${specialRequirement.id}`, updatedRequirement).subscribe(\n      (res) => {\n        console.log('Special Requirement Update Successful:', res);\n        this.snackBar.open('Grade edited successfully!', 'Close', {\n          duration: 2000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n        });\n        if (this.updatedSpecialGrade !== null) {\n          this.specialRequirements[programCode][rowIndex].grade = this.updatedSpecialGrade;\n        }\n        this.editingSpecialRowIndex = null;\n        this.updatedSpecialGrade = null;\n        this.cdr.markForCheck();\n      },\n      (err) => {\n        console.error('Update failed:', err);\n      }\n    );\n  }\n\n  confirmDelete(id: number, programCode?: string) {\n    const confirmResult = window.confirm(\"Are you sure you want to delete this entry?\");\n    if (confirmResult) {\n      this.deleteEntryRequirement(id, programCode);\n    }\n  }\n\n  deleteEntryRequirement(id: number, programCode?: string) {\n    this.http.delete(`https://localhost:7108/api/EntryRequirement/delete/${id}`, { responseType: 'text' })\n      .subscribe(\n        (response) => {\n          console.log('Delete successful:', response);\n          this.generalRequirement.data = this.generalRequirement.data.filter(item => item.id !== id);\n          if (programCode) {\n            this.specialRequirements[programCode] = this.specialRequirements[programCode].filter(item => item.id !== id);\n          }\n\n          this.snackBar.open('Entry requirement deleted successfully!', 'Close', {\n            duration: 2000,\n            horizontalPosition: 'right',\n            verticalPosition: 'top',\n          });\n\n          this.cdr.detectChanges();\n        },\n        (error) => {\n          console.error('Delete failed:', error);\n          this.snackBar.open('Failed to delete entry requirement.', 'Close', {\n            duration: 2000,\n            horizontalPosition: 'right',\n            verticalPosition: 'top',\n          });\n        }\n      );\n  }\n\n  openCreateModal() {\n    this.isCreateModalOpen = true;\n  }\n\n  closeCreateModal() {\n    this.isCreateModalOpen = false;\n    this.createForm.reset();\n  }\n\n  submitEntry(): void {\n    if (this.createForm.invalid) {\n      return;\n    }\n\n    const formData = this.createForm.value;\n\n    this.http.post('https://localhost:7108/api/EntryRequirement/create', formData)\n      .subscribe(\n        (response) => {\n          console.log('Form submitted successfully!', response);\n          this.snackBar.open('Form submitted successfully!', 'Close', {\n            duration: 3000,\n            horizontalPosition: 'right',\n            verticalPosition: 'top',\n          });\n\n          this.closeCreateModal();\n          this.getGeneralRequirement();\n          this.getSpecialRequirements(formData.program_code);\n        },\n        (error) => {\n          console.error('Error submitting the form:', error);\n\n          // Check if the error is a constraint violation (duplicate graduate_type + requirement_type)\n          if (error.status === 409) {\n            this.errorMessage = error.error;  // Set the error message from the backend\n          } else {\n            this.errorMessage = 'An error occurred while submitting the form.';\n          }\n        }\n      );\n  }\n\n  // Method to change behavior when type is selected as 'special'\n  onTypeChange(event: any) {\n    if (event.value === 'special') {\n      this.isSpecialSelected = true;\n    } else {\n      this.isSpecialSelected = false;\n    }\n  }\n\n  onTypeChangeSubject(event: any) {\n    this.isSPM = event.value === 'SPM';\n    this.isSTPM = event.value === 'STPM';\n    this.isDiploma = event.value === 'Diploma';\n    this.isMatriculation = event.value === 'Matriculation';\n  }\n\n  clearFilter(): void {\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n  }\n\n  getProgramsForFaculty(): Program[] {\n    return this.selectedFaculty ? this.programs[this.selectedFaculty] : [];\n  }\n\n  getProgramsForFacultyDropdown() {\n    const faculty = this.createForm.value.faculty;\n    return this.programs[faculty] || [];\n  }\n\n  selectProgram(programCode: string): void {\n    this.selectedProgramCode = programCode;\n    this.getSpecialRequirements(programCode);\n  }\n\n  getCategoryClass(category: string): string {\n    switch (category) {\n      case 'SPM':\n        return 'spm-tag';\n      case 'STPM':\n        return 'stpm-tag';\n      // case 'MUET':\n      //   return 'muet-tag';\n      case 'Diploma':\n        return 'diploma-tag';\n      case 'Matriculation':\n        return 'matriculation-tag';\n      default:\n        return '';\n    }\n  }\n\n  // faculties: Faculty[] = [\n  //   { value: 'fc', viewValue: 'Faculty of Computing' },\n  //   { value: 'fkm', viewValue: 'Faculty of Mechanical Engineering' },\n  //   { value: 'fke', viewValue: 'Faculty of Engineering' },\n  // ];\n\n  // programs: { [key: string]: Program[] } = {\n  //   fc: [\n  //     { code: 'UT6481001', name: 'Software Engineering' },\n  //     { code: 'UT6481002', name: 'Data Engineering' },\n  //     { code: 'UT6481003', name: 'Bioinformatics' },\n  //     { code: 'UT6481004', name: 'Network and Cybersecurity' },\n  //     { code: 'UT6481005', name: 'Graphics and Multimedia' },\n  //   ],\n  //   fkm: [\n  //     { code: 'UT6521001', name: 'Pure Mechanics' },\n  //     { code: 'UT6521003', name: 'Manufacturing' },\n  //     { code: 'UT6521004', name: 'Industrial' },\n  //     { code: 'UT6525001', name: 'Aerospace' },\n  //     { code: 'UT6525002', name: 'Automotive' },\n  //     { code: 'UT6525003', name: 'Offshore' },\n  //   ],\n  //   fke: [\n  //     { code: 'UT6522002', name: 'Electrical Engineering' },\n  //     { code: 'UT6523001', name: 'Electronic Engineering' },\n  //     { code: 'UT6523002', name: 'Mechatronics Engineering' },\n  //     { code: 'UT6523003', name: 'Biomedical Engineering' },\n  //   ],\n  // };\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}