{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nlet ViewApplicantsComponent = class ViewApplicantsComponent {\n  constructor(http, cdr) {\n    this.http = http;\n    this.cdr = cdr;\n    this.displayedColumns = ['id', 'name', 'pre_u', 'spm_result', 'applied_program', 'action'];\n    this.dataSource = new MatTableDataSource();\n    this.isModalOpen = false;\n    this.modalTitle = '';\n    this.modalContent = null;\n    this.apiUrl = 'https://localhost:7108/api/Application';\n  }\n  ngOnInit() {\n    this.fetchApplicants();\n  }\n  fetchApplicants() {\n    this.http.get(this.apiUrl).subscribe({\n      next: data => {\n        this.dataSource.data = data;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching data:', err)\n    });\n  }\n  openPreUResultModal(application) {\n    this.http.get(`${this.apiUrl}/${application.id}`).subscribe({\n      next: data => {\n        this.modalTitle = data.name + \"'s \" + data.preUType + \" Result\";\n        try {\n          this.modalContent = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          this.modalContent = data.preUResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching application details:', err)\n    });\n  }\n  openSpmResultModal(application) {\n    this.http.get(`${this.apiUrl}/${application.id}`).subscribe({\n      next: data => {\n        this.modalTitle = data.name + \"'s SPM Result\";\n        try {\n          this.modalContent = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          this.modalContent = data.spmResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching application details:', err)\n    });\n  }\n  openApplicantDetailModal(application) {\n    this.http.get(`${this.apiUrl}/detail/${application.id}`).subscribe({\n      next: data => {\n        try {\n          data.spmResultParsed = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          data.spmResultParsed = data.spmResult;\n        }\n        try {\n          data.preUResultParsed = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          data.preUResultParsed = data.preUResult;\n        }\n        this.modalTitle = 'Applicant Details';\n        this.modalContent = data;\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching detailed application info:', err)\n    });\n  }\n  closeModal() {\n    this.isModalOpen = false;\n  }\n  deleteApplicant(id) {\n    this.http.delete(`${this.apiUrl}/${id}`).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error deleting record:', err)\n    });\n  }\n  createApplicant(newApplicant) {\n    this.http.post(this.apiUrl, newApplicant).subscribe({\n      next: createdRecord => {\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error creating record:', err)\n    });\n  }\n  updateApplicant(updatedApplicant) {\n    this.http.put(`${this.apiUrl}/${updatedApplicant.id}`, updatedApplicant).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error updating record:', err)\n    });\n  }\n};\nViewApplicantsComponent = __decorate([Component({\n  selector: 'app-view-applicants',\n  standalone: true,\n  templateUrl: './view-applicants.component.html',\n  styleUrls: ['./view-applicants.component.css'],\n  imports: [CommonModule, MatTableModule, MatSortModule, MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule, MatIconModule, MatExpansionModule, MatButtonModule, MatSnackBarModule, ReactiveFormsModule, MatChipsModule, MatBadgeModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], ViewApplicantsComponent);\nexport { ViewApplicantsComponent };","map":{"version":3,"mappings":"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","names":["CommonModule","ChangeDetectionStrategy","Component","FormsModule","ReactiveFormsModule","MatBadgeModule","MatButtonModule","MatChipsModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatSelectModule","MatSnackBarModule","MatSortModule","MatTableDataSource","MatTableModule","ViewApplicantsComponent","constructor","http","cdr","ngOnInit","fetchApplicants","get","apiUrl","subscribe","next","data","dataSource","markForCheck","error","err","console","openPreUResultModal","application","id","modalTitle","name","preUType","modalContent","JSON","parse","preUResult","e","isModalOpen","openSpmResultModal","spmResult","openApplicantDetailModal","spmResultParsed","preUResultParsed","closeModal","deleteApplicant","delete","createApplicant","newApplicant","post","createdRecord","updateApplicant","updatedApplicant","put","selector","standalone","templateUrl","styleUrls","imports","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\jessm\\OneDrive\\Desktop\\work\\FYP\\sam\\ClientApp\\src\\app\\view-applicants\\view-applicants.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component,OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nexport interface Applicants {\n  id: number;\n  name: string;\n  pre_u: string;\n  spm_result: string;\n  applied_program: string;\n}\n\n@Component({\n  selector: 'app-view-applicants',\n  standalone: true,\n  templateUrl: './view-applicants.component.html',\n  styleUrls: ['./view-applicants.component.css'],\n  imports:[\n   CommonModule,\n       MatTableModule,\n       MatSortModule,\n       MatFormFieldModule,\n       MatSelectModule,\n       MatInputModule,\n       FormsModule,\n       MatIconModule,\n       MatExpansionModule,\n       MatButtonModule,\n       MatSnackBarModule,\n       ReactiveFormsModule,\n       MatChipsModule,\n       MatBadgeModule\n\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewApplicantsComponent implements OnInit {\n  displayedColumns: string[] = ['id', 'name', 'pre_u', 'spm_result', 'applied_program', 'action'];\n  dataSource = new MatTableDataSource<Applicants>();\n  public isModalOpen = false;\n  public modalTitle = '';\n  public modalContent: any = null;\n  private apiUrl = 'https://localhost:7108/api/Application';\n\n  constructor(private http: HttpClient, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.fetchApplicants();\n  }\n\n  fetchApplicants(): void {\n    this.http.get<Applicants[]>(this.apiUrl).subscribe({\n      next: (data: Applicants[]) => {\n        this.dataSource.data = data;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching data:', err)\n    });\n  }\n\n  openPreUResultModal(application: Applicants): void {\n    this.http.get<any>(`${this.apiUrl}/${application.id}`).subscribe({\n      next: (data) => {\n        this.modalTitle = data.name +\"'s \"+ data.preUType +\" Result\";\n        try {\n          this.modalContent = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          this.modalContent = data.preUResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching application details:', err)\n    });\n  }\n\n  openSpmResultModal(application: Applicants): void {\n    this.http.get<any>(`${this.apiUrl}/${application.id}`).subscribe({\n      next: (data) => {\n        this.modalTitle =data.name +\"'s SPM Result\";\n        try {\n          this.modalContent = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          this.modalContent = data.spmResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching application details:', err)\n    });\n  }\n\n  openApplicantDetailModal(application: Applicants): void {\n    this.http.get<any>(`${this.apiUrl}/detail/${application.id}`).subscribe({\n      next: (data) => {\n        try {\n          data.spmResultParsed = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          data.spmResultParsed = data.spmResult;\n        }\n        try {\n          data.preUResultParsed = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          data.preUResultParsed = data.preUResult;\n        }\n        this.modalTitle = 'Applicant Details';\n        this.modalContent = data;\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching detailed application info:', err)\n    });\n  }\n\n\n\n  closeModal(): void {\n    this.isModalOpen = false;\n  }\n\n  deleteApplicant(id: number): void {\n    this.http.delete(`${this.apiUrl}/${id}`).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error deleting record:', err)\n    });\n  }\n\n  createApplicant(newApplicant: Applicants): void {\n    this.http.post<Applicants>(this.apiUrl, newApplicant).subscribe({\n      next: (createdRecord) => {\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error creating record:', err)\n    });\n  }\n\n  updateApplicant(updatedApplicant: Applicants): void {\n    this.http.put(`${this.apiUrl}/${updatedApplicant.id}`, updatedApplicant).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error updating record:', err)\n    });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}