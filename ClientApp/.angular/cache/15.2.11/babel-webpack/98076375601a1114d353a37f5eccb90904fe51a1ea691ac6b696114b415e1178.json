{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nlet ProgramManageComponent = class ProgramManageComponent {\n  constructor(http, cdr, snackBar) {\n    this.http = http;\n    this.cdr = cdr;\n    this.snackBar = snackBar;\n    this.displayedColumns = ['graduate_type', 'requirement', 'grade', 'action'];\n    this.generalRequirement = new MatTableDataSource([]);\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n    this.specialRequirements = {};\n    this.editingRowIndex = null;\n    this.updatedGrade = null;\n    this.faculties = [{\n      value: 'fc',\n      viewValue: 'Faculty of Computing'\n    }, {\n      value: 'fkm',\n      viewValue: 'Faculty of Mechanical Engineering'\n    }, {\n      value: 'fke',\n      viewValue: 'Faculty of Engineering'\n    }];\n    this.programs = {\n      fc: [{\n        code: 'UT6481001',\n        name: 'Software Engineering'\n      }, {\n        code: 'UT6481002',\n        name: 'Data Engineering'\n      }, {\n        code: 'UT6481003',\n        name: 'Bioinformatics'\n      }, {\n        code: 'UT6481004',\n        name: 'Network and Cybersecurity'\n      }, {\n        code: 'UT6481005',\n        name: 'Graphics and Multimedia'\n      }],\n      fkm: [{\n        code: 'UT6521001',\n        name: 'Pure Mechanics'\n      }, {\n        code: 'UT6521003',\n        name: 'Manufacturing'\n      }, {\n        code: 'UT6521004',\n        name: 'Industrial'\n      }, {\n        code: 'UT6525001',\n        name: 'Aerospace'\n      }, {\n        code: 'UT6525002',\n        name: 'Automotive'\n      }, {\n        code: 'UT6525003',\n        name: 'Offshore'\n      }],\n      fke: [{\n        code: 'UT6522002',\n        name: 'Electrical Engineering'\n      }, {\n        code: 'UT6523001',\n        name: 'Electronic Engineering'\n      }, {\n        code: 'UT6523002',\n        name: 'Mechatronics Engineering'\n      }, {\n        code: 'UT6523003',\n        name: 'Biomedical Engineering'\n      }]\n    };\n    this.getGeneralRequirement();\n  }\n  getGeneralRequirement() {\n    this.http.get('https://localhost:7108/api/EntryRequirement/general').subscribe(res => {\n      this.generalRequirement = new MatTableDataSource(res);\n      if (this.sort) {\n        this.generalRequirement.sort = this.sort;\n      }\n      this.cdr.markForCheck();\n    });\n  }\n  ngAfterViewInit() {\n    if (this.sort) {\n      this.generalRequirement.sort = this.sort;\n    }\n  }\n  getSpecialRequirements(programCode) {\n    this.http.get(`https://localhost:7108/api/EntryRequirement/special/${programCode}`).subscribe(data => {\n      this.specialRequirements[programCode] = data;\n      this.cdr.markForCheck();\n    });\n  }\n  startEditing(rowIndex, currentGrade) {\n    this.editingRowIndex = rowIndex;\n    this.updatedGrade = currentGrade;\n  }\n  saveChanges(rowIndex) {\n    const row = this.generalRequirement.data[rowIndex];\n    const updatedRequirement = {\n      id: row.id,\n      grade: this.updatedGrade,\n      subject: row.subject,\n      requirement_type: row.requirement_type,\n      graduate_type: row.graduate_type\n    };\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${row.id}`, updatedRequirement).subscribe(res => {\n      console.log('Update successful:', res);\n      this.generalRequirement.data[rowIndex].grade = this.updatedGrade;\n      this.editingRowIndex = null;\n      this.updatedGrade = null;\n      this.snackBar.open('Form edited successfully!', 'Close', {\n        duration: 3000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n    }, err => {\n      console.error('Update failed:', err);\n    });\n  }\n  clearFilter() {\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n  }\n  getProgramsForFaculty() {\n    return this.selectedFaculty ? this.programs[this.selectedFaculty] : [];\n  }\n  selectProgram(programCode) {\n    this.selectedProgramCode = programCode;\n    this.getSpecialRequirements(programCode);\n  }\n};\n__decorate([ViewChild(MatSort, {\n  static: false\n})], ProgramManageComponent.prototype, \"sort\", void 0);\nProgramManageComponent = __decorate([Component({\n  selector: 'app-program-manage',\n  standalone: true,\n  imports: [CommonModule, MatTableModule, MatSortModule, MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule, MatIconModule, MatExpansionModule, MatButtonModule],\n  templateUrl: './program-manage.component.html',\n  styleUrls: ['./program-manage.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], ProgramManageComponent);\nexport { ProgramManageComponent };","map":{"version":3,"mappings":"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","names":["CommonModule","ChangeDetectionStrategy","Component","ViewChild","FormsModule","MatButtonModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatSelectModule","MatSort","MatSortModule","MatTableDataSource","MatTableModule","ProgramManageComponent","constructor","http","cdr","snackBar","value","viewValue","fc","code","name","fkm","fke","getGeneralRequirement","get","subscribe","res","generalRequirement","sort","markForCheck","ngAfterViewInit","getSpecialRequirements","programCode","data","specialRequirements","startEditing","rowIndex","currentGrade","editingRowIndex","updatedGrade","saveChanges","row","updatedRequirement","id","grade","subject","requirement_type","graduate_type","put","console","log","open","duration","horizontalPosition","verticalPosition","err","error","clearFilter","selectedFaculty","selectedProgramCode","getProgramsForFaculty","programs","selectProgram","__decorate","static","selector","standalone","imports","templateUrl","styleUrls","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\jessm\\OneDrive\\Desktop\\work\\FYP\\sam\\ClientApp\\src\\app\\program-manage\\program-manage.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewChild } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\n\nexport interface Faculty {\n  value: string;\n  viewValue: string;\n}\n\nexport interface Program {\n  code: string;\n  name: string;\n}\n\nexport interface SpecialEntryRequirement {\n  category: string;\n  requirement: string;\n  grade: string;\n}\n\n\n@Component({\n  selector: 'app-program-manage',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    FormsModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatButtonModule,\n\n  ],\n  templateUrl: './program-manage.component.html',\n  styleUrls: ['./program-manage.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgramManageComponent implements AfterViewInit{\n  constructor(private http: HttpClient,private cdr: ChangeDetectorRef,private snackBar: MatSnackBar\n  ) {\n    this.getGeneralRequirement();\n  }\n\n  displayedColumns: string[] = ['graduate_type','requirement', 'grade','action'];\n  generalRequirement: MatTableDataSource<any> = new MatTableDataSource<any>([]);\n  selectedFaculty: string | null = null;\n  selectedProgramCode: string | null = null;\n  specialRequirements: { [programCode: string]: SpecialEntryRequirement[] } = {};\n  editingRowIndex: number | null = null;\n  updatedGrade: string | null = null;\n\n  faculties: Faculty[] = [\n    {value: 'fc', viewValue: 'Faculty of Computing'},\n    {value: 'fkm', viewValue: 'Faculty of Mechanical Engineering'},\n    {value: 'fke', viewValue: 'Faculty of Engineering'},\n  ];\n\n  getGeneralRequirement() {\n    this.http.get('https://localhost:7108/api/EntryRequirement/general')\n      .subscribe((res: any) => {\n        this.generalRequirement = new MatTableDataSource(res);\n        if (this.sort) {\n          this.generalRequirement.sort = this.sort;\n        }\n        this.cdr.markForCheck();\n      });\n  }\n\n  @ViewChild(MatSort, { static: false }) sort: MatSort | undefined;\n  ngAfterViewInit() {\n    if (this.sort) {\n      this.generalRequirement.sort = this.sort ;\n    }  }\n\n\n  getSpecialRequirements(programCode: string){\n    this.http.get<SpecialEntryRequirement[]>(`https://localhost:7108/api/EntryRequirement/special/${programCode}`)\n      .subscribe((data) => {\n        this.specialRequirements[programCode] = data;\n        this.cdr.markForCheck();\n      });\n  }\n\n  startEditing(rowIndex: number, currentGrade: string) {\n    this.editingRowIndex = rowIndex;\n    this.updatedGrade = currentGrade;\n  }\n\n  saveChanges(rowIndex: number) {\n    const row = this.generalRequirement.data[rowIndex];\n    const updatedRequirement = {\n      id: row.id,\n      grade: this.updatedGrade,\n      subject: row.subject,\n      requirement_type: row.requirement_type,\n      graduate_type: row.graduate_type,\n    };\n\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${row.id}`, updatedRequirement).subscribe(\n      (res) => {\n        console.log('Update successful:', res);\n        this.generalRequirement.data[rowIndex].grade = this.updatedGrade;\n        this.editingRowIndex = null;\n        this.updatedGrade = null;\n        this.snackBar.open('Form edited successfully!', 'Close', {\n          duration: 3000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n      });\n      },\n      (err) => {\n        console.error('Update failed:', err);\n      }\n    );\n  }\n\n\n  clearFilter(): void {\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n  }\n\n  getProgramsForFaculty(): Program[] {\n    return this.selectedFaculty ? this.programs[this.selectedFaculty] : [];\n  }\n\n  selectProgram(programCode: string): void {\n    this.selectedProgramCode = programCode;\n    this.getSpecialRequirements(programCode);\n  }\n\n  programs: { [key: string]: Program[] } = {\n    fc: [\n      { code: 'UT6481001', name: 'Software Engineering' },\n      { code: 'UT6481002', name: 'Data Engineering' },\n      { code: 'UT6481003', name: 'Bioinformatics' },\n      { code: 'UT6481004', name: 'Network and Cybersecurity' },\n      { code: 'UT6481005', name: 'Graphics and Multimedia' },\n    ],\n    fkm: [\n      { code: 'UT6521001', name: 'Pure Mechanics' },\n      { code: 'UT6521003', name: 'Manufacturing' },\n      { code: 'UT6521004', name: 'Industrial' },\n      { code: 'UT6525001', name: 'Aerospace' },\n      { code: 'UT6525002', name: 'Automotive' },\n      { code: 'UT6525003', name: 'Offshore' },\n    ],\n    fke: [\n      { code: 'UT6522002', name: 'Electrical Engineering' },\n      { code: 'UT6523001', name: 'Electronic Engineering' },\n      { code: 'UT6523002', name: 'Mechatronics Engineering' },\n      { code: 'UT6523003', name: 'Biomedical Engineering' },\n    ],\n  };\n\n }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}