{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nlet ViewApplicantsComponent = class ViewApplicantsComponent {\n  constructor(fb, http, cdr) {\n    this.fb = fb;\n    this.http = http;\n    this.cdr = cdr;\n    this.displayedColumns = ['id', 'name', 'pre_u', 'spm_result', 'applied_program', 'action'];\n    this.dataSource = new MatTableDataSource();\n    this.isModalOpen = false;\n    this.modalTitle = '';\n    this.modalContent = null;\n    this.apiUrl = 'https://localhost:7108/api/Application';\n    // For the add modal:\n    this.isAddModalOpen = false;\n    // Subject option lists\n    this.spmSubjectOptions = ['Bahasa Melayu', 'Bahasa Cina', 'Bahasa Ingerris', 'Sejarah', 'Pendidikan Moral', 'Physics', 'Chemistry', 'Biology', 'Mathematics', 'Additional Mathematics'];\n    this.stpmSubjectOptions = ['Mathematics (M)', 'Mathematics (T)', 'Physics', 'Chemistry', 'Biology', 'Pengajian Am', 'MUET'];\n    this.matriculationSubjectOptions = ['Physics', 'Chemistry', 'Biology', 'MUET'];\n    this.foundationSubjectOptions = ['MUET', 'Physics', 'Chemistry', 'Biology'];\n    this.diplomaSubjectOptions = ['MUET'];\n    this.addForm = this.fb.group({\n      name: ['', Validators.required],\n      preUType: ['', Validators.required],\n      appliedProgram: ['', Validators.required],\n      icNumber: ['', Validators.required],\n      address: [''],\n      gender: [''],\n      spmResults: this.fb.array([], Validators.required),\n      preUResults: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.fetchApplicants();\n  }\n  fetchApplicants() {\n    this.http.get(this.apiUrl).subscribe({\n      next: data => {\n        this.dataSource.data = data;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching data:', err)\n    });\n  }\n  openPreUResultModal(application) {\n    this.http.get(`${this.apiUrl}/${application.id}`).subscribe({\n      next: data => {\n        this.modalTitle = data.name + \"'s \" + data.preUType + \" Result\";\n        try {\n          this.modalContent = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          this.modalContent = data.preUResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching application details:', err)\n    });\n  }\n  openSpmResultModal(application) {\n    this.http.get(`${this.apiUrl}/${application.id}`).subscribe({\n      next: data => {\n        this.modalTitle = data.name + \"'s SPM Result\";\n        try {\n          this.modalContent = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          this.modalContent = data.spmResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching application details:', err)\n    });\n  }\n  openApplicantDetailModal(application) {\n    this.http.get(`${this.apiUrl}/detail/${application.id}`).subscribe({\n      next: data => {\n        try {\n          data.spmResultParsed = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          data.spmResultParsed = data.spmResult;\n        }\n        try {\n          data.preUResultParsed = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          data.preUResultParsed = data.preUResult;\n        }\n        this.modalTitle = 'Applicant Details';\n        this.modalContent = data;\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching detailed application info:', err)\n    });\n  }\n  closeModal() {\n    this.isModalOpen = false;\n  }\n  // Getters for form arrays\n  get spmResults() {\n    return this.addForm.get('spmResults');\n  }\n  get preUResults() {\n    return this.addForm.get('preUResults');\n  }\n  // Methods to add a new result row\n  addSpmResult() {\n    this.spmResults.push(this.fb.group({\n      subject: ['', Validators.required],\n      grade: ['', Validators.required]\n    }));\n  }\n  addPreUResult() {\n    this.preUResults.push(this.fb.group({\n      subject: ['', Validators.required],\n      grade: ['', Validators.required]\n    }));\n  }\n  // Methods to remove a row\n  removeSpmResult(index) {\n    this.spmResults.removeAt(index);\n  }\n  removePreUResult(index) {\n    this.preUResults.removeAt(index);\n  }\n  // Filtering available subjects for SPM: remove already selected subjects\n  getAvailableSpmSubjects(index) {\n    const selectedSubjects = this.spmResults.controls.filter((ctrl, i) => i !== index).map(ctrl => ctrl.get('subject')?.value).filter(value => !!value);\n    return this.spmSubjectOptions.filter(option => !selectedSubjects.includes(option));\n  }\n  // Filtering available subjects for Pre-U based on the selected preUType in the form\n  getAvailablePreUSubjects(index) {\n    let options = [];\n    const preUType = this.addForm.get('preUType')?.value;\n    switch (preUType) {\n      case 'STPM':\n        options = this.stpmSubjectOptions;\n        break;\n      case 'Matriculation':\n        options = this.matriculationSubjectOptions;\n        break;\n      case 'Foundation':\n        options = this.foundationSubjectOptions;\n        break;\n      case 'Diploma':\n        options = this.diplomaSubjectOptions;\n        break;\n      default:\n        options = [];\n    }\n    const selectedSubjects = this.preUResults.controls.filter((ctrl, i) => i !== index).map(ctrl => ctrl.get('subject')?.value).filter(value => !!value);\n    return options.filter(option => !selectedSubjects.includes(option));\n  }\n  // Method to submit the form\n  onAddSubmit() {\n    if (this.addForm.valid) {\n      // Prepare the payload\n      const newRecord = this.addForm.value;\n      // Convert the results arrays to JSON strings\n      newRecord.spmResult = JSON.stringify(newRecord.spmResults);\n      newRecord.preUResult = JSON.stringify(newRecord.preUResults);\n      // Remove the raw arrays if not needed by the backend:\n      delete newRecord.spmResults;\n      delete newRecord.preUResults;\n      console.log('Submitting new record:', newRecord);\n      // Use HTTP POST to submit the new applicant/application record\n      this.http.post(this.apiUrl, newRecord).subscribe({\n        next: res => {\n          this.fetchApplicants();\n          this.closeAddModal();\n        },\n        error: err => console.error('Error creating record:', err)\n      });\n    } else {\n      console.log('Form is invalid');\n    }\n  }\n  openAddModal() {\n    // Clear previous data\n    this.addForm.reset();\n    // Clear form arrays\n    while (this.spmResults.length) {\n      this.spmResults.removeAt(0);\n    }\n    while (this.preUResults.length) {\n      this.preUResults.removeAt(0);\n    }\n    // Optionally add one default row (for SPM is required)\n    this.addSpmResult();\n    // And one for preU (if you want at least one row)\n    this.addPreUResult();\n    this.isAddModalOpen = true;\n  }\n  closeAddModal() {\n    this.isAddModalOpen = false;\n  }\n  deleteApplicant(id) {\n    this.http.delete(`${this.apiUrl}/${id}`).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error deleting record:', err)\n    });\n  }\n  createApplicant(newApplicant) {\n    this.http.post(this.apiUrl, newApplicant).subscribe({\n      next: createdRecord => {\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error creating record:', err)\n    });\n  }\n  updateApplicant(updatedApplicant) {\n    this.http.put(`${this.apiUrl}/${updatedApplicant.id}`, updatedApplicant).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error updating record:', err)\n    });\n  }\n};\nViewApplicantsComponent = __decorate([Component({\n  selector: 'app-view-applicants',\n  standalone: true,\n  templateUrl: './view-applicants.component.html',\n  styleUrls: ['./view-applicants.component.css'],\n  imports: [CommonModule, MatTableModule, MatSortModule, MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule, MatIconModule, MatExpansionModule, MatButtonModule, MatSnackBarModule, ReactiveFormsModule, MatChipsModule, MatBadgeModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], ViewApplicantsComponent);\nexport { ViewApplicantsComponent };","map":{"version":3,"mappings":"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","names":["CommonModule","ChangeDetectionStrategy","Component","FormsModule","ReactiveFormsModule","Validators","MatBadgeModule","MatButtonModule","MatChipsModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatSelectModule","MatSnackBarModule","MatSortModule","MatTableDataSource","MatTableModule","ViewApplicantsComponent","constructor","fb","http","cdr","addForm","group","name","required","preUType","appliedProgram","icNumber","address","gender","spmResults","array","preUResults","ngOnInit","fetchApplicants","get","apiUrl","subscribe","next","data","dataSource","markForCheck","error","err","console","openPreUResultModal","application","id","modalTitle","modalContent","JSON","parse","preUResult","e","isModalOpen","openSpmResultModal","spmResult","openApplicantDetailModal","spmResultParsed","preUResultParsed","closeModal","addSpmResult","push","subject","grade","addPreUResult","removeSpmResult","index","removeAt","removePreUResult","getAvailableSpmSubjects","selectedSubjects","controls","filter","ctrl","i","map","value","spmSubjectOptions","option","includes","getAvailablePreUSubjects","options","stpmSubjectOptions","matriculationSubjectOptions","foundationSubjectOptions","diplomaSubjectOptions","onAddSubmit","valid","newRecord","stringify","log","post","res","closeAddModal","openAddModal","reset","length","isAddModalOpen","deleteApplicant","delete","createApplicant","newApplicant","createdRecord","updateApplicant","updatedApplicant","put","selector","standalone","templateUrl","styleUrls","imports","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\jessm\\OneDrive\\Desktop\\work\\FYP\\sam\\ClientApp\\src\\app\\view-applicants\\view-applicants.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component,OnInit, ViewChild } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nexport interface Applicants {\n  id: number;\n  name: string;\n  pre_u: string;\n  spm_result: string;\n  applied_program: string;\n}\n\n@Component({\n  selector: 'app-view-applicants',\n  standalone: true,\n  templateUrl: './view-applicants.component.html',\n  styleUrls: ['./view-applicants.component.css'],\n  imports:[\n   CommonModule,\n       MatTableModule,\n       MatSortModule,\n       MatFormFieldModule,\n       MatSelectModule,\n       MatInputModule,\n       FormsModule,\n       MatIconModule,\n       MatExpansionModule,\n       MatButtonModule,\n       MatSnackBarModule,\n       ReactiveFormsModule,\n       MatChipsModule,\n       MatBadgeModule\n\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewApplicantsComponent implements OnInit {\n  displayedColumns: string[] = ['id', 'name', 'pre_u', 'spm_result', 'applied_program', 'action'];\n  dataSource = new MatTableDataSource<Applicants>();\n  public isModalOpen = false;\n  public modalTitle = '';\n  public modalContent: any = null;\n  private apiUrl = 'https://localhost:7108/api/Application';\n  // For the add modal:\n  public isAddModalOpen = false;\n  public addForm: FormGroup;\n\n  // Subject option lists\n  spmSubjectOptions = [\n    'Bahasa Melayu',\n    'Bahasa Cina',\n    'Bahasa Ingerris',\n    'Sejarah',\n    'Pendidikan Moral',\n    'Physics',\n    'Chemistry',\n    'Biology',\n    'Mathematics',\n    'Additional Mathematics'\n  ];\n  stpmSubjectOptions = [\n    'Mathematics (M)',\n    'Mathematics (T)',\n    'Physics',\n    'Chemistry',\n    'Biology',\n    'Pengajian Am',\n    'MUET'\n  ];\n  matriculationSubjectOptions = [\n    'Physics',\n    'Chemistry',\n    'Biology',\n    'MUET'\n  ];\n  foundationSubjectOptions = [\n    'MUET',\n    'Physics',\n    'Chemistry',\n    'Biology'\n  ];\n  diplomaSubjectOptions = [\n    'MUET'\n  ];\n  constructor( private fb: FormBuilder,\n    private http: HttpClient,\n    private cdr: ChangeDetectorRef) {\n      this.addForm = this.fb.group({\n        name: ['', Validators.required],\n        preUType: ['', Validators.required],\n        appliedProgram: ['', Validators.required],\n        icNumber: ['', Validators.required],\n        address: [''],\n        gender: [''],\n        spmResults: this.fb.array([], Validators.required),\n        preUResults: this.fb.array([])\n      });\n    }\n\n  ngOnInit(): void {\n    this.fetchApplicants();\n  }\n\n  fetchApplicants(): void {\n    this.http.get<Applicants[]>(this.apiUrl).subscribe({\n      next: (data: Applicants[]) => {\n        this.dataSource.data = data;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching data:', err)\n    });\n  }\n\n  openPreUResultModal(application: Applicants): void {\n    this.http.get<any>(`${this.apiUrl}/${application.id}`).subscribe({\n      next: (data) => {\n        this.modalTitle = data.name +\"'s \"+ data.preUType +\" Result\";\n        try {\n          this.modalContent = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          this.modalContent = data.preUResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching application details:', err)\n    });\n  }\n\n  openSpmResultModal(application: Applicants): void {\n    this.http.get<any>(`${this.apiUrl}/${application.id}`).subscribe({\n      next: (data) => {\n        this.modalTitle =data.name +\"'s SPM Result\";\n        try {\n          this.modalContent = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          this.modalContent = data.spmResult;\n        }\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching application details:', err)\n    });\n  }\n\n  openApplicantDetailModal(application: Applicants): void {\n    this.http.get<any>(`${this.apiUrl}/detail/${application.id}`).subscribe({\n      next: (data) => {\n        try {\n          data.spmResultParsed = JSON.parse(data.spmResult);\n        } catch (e) {\n          console.error('Error parsing spmResult JSON', e);\n          data.spmResultParsed = data.spmResult;\n        }\n        try {\n          data.preUResultParsed = JSON.parse(data.preUResult);\n        } catch (e) {\n          console.error('Error parsing preUResult JSON', e);\n          data.preUResultParsed = data.preUResult;\n        }\n        this.modalTitle = 'Applicant Details';\n        this.modalContent = data;\n        this.isModalOpen = true;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching detailed application info:', err)\n    });\n  }\n\n  closeModal(): void {\n    this.isModalOpen = false;\n  }\n\n  // Getters for form arrays\n  get spmResults(): FormArray {\n    return this.addForm.get('spmResults') as FormArray;\n  }\n\n  get preUResults(): FormArray {\n    return this.addForm.get('preUResults') as FormArray;\n  }\n\n  // Methods to add a new result row\n  addSpmResult(): void {\n    this.spmResults.push(this.fb.group({\n      subject: ['', Validators.required],\n      grade: ['', Validators.required]\n    }));\n  }\n\n  addPreUResult(): void {\n    this.preUResults.push(this.fb.group({\n      subject: ['', Validators.required],\n      grade: ['', Validators.required]\n    }));\n  }\n\n  // Methods to remove a row\n  removeSpmResult(index: number): void {\n    this.spmResults.removeAt(index);\n  }\n  removePreUResult(index: number): void {\n    this.preUResults.removeAt(index);\n  }\n\n  // Filtering available subjects for SPM: remove already selected subjects\n  getAvailableSpmSubjects(index: number): string[] {\n    const selectedSubjects = this.spmResults.controls\n      .filter((ctrl, i) => i !== index)\n      .map(ctrl => ctrl.get('subject')?.value)\n      .filter(value => !!value);\n    return this.spmSubjectOptions.filter(option => !selectedSubjects.includes(option));\n  }\n\n  // Filtering available subjects for Pre-U based on the selected preUType in the form\n  getAvailablePreUSubjects(index: number): string[] {\n    let options: string[] = [];\n    const preUType = this.addForm.get('preUType')?.value;\n    switch (preUType) {\n      case 'STPM':\n        options = this.stpmSubjectOptions;\n        break;\n      case 'Matriculation':\n        options = this.matriculationSubjectOptions;\n        break;\n      case 'Foundation':\n        options = this.foundationSubjectOptions;\n        break;\n      case 'Diploma':\n        options = this.diplomaSubjectOptions;\n        break;\n      default:\n        options = [];\n    }\n    const selectedSubjects = this.preUResults.controls\n      .filter((ctrl, i) => i !== index)\n      .map(ctrl => ctrl.get('subject')?.value)\n      .filter(value => !!value);\n    return options.filter(option => !selectedSubjects.includes(option));\n  }\n\n  // Method to submit the form\n  onAddSubmit(): void {\n    if (this.addForm.valid) {\n      // Prepare the payload\n      const newRecord = this.addForm.value;\n      // Convert the results arrays to JSON strings\n      newRecord.spmResult = JSON.stringify(newRecord.spmResults);\n      newRecord.preUResult = JSON.stringify(newRecord.preUResults);\n      // Remove the raw arrays if not needed by the backend:\n      delete newRecord.spmResults;\n      delete newRecord.preUResults;\n      console.log('Submitting new record:', newRecord);\n      // Use HTTP POST to submit the new applicant/application record\n      this.http.post(this.apiUrl, newRecord).subscribe({\n        next: (res) => {\n          this.fetchApplicants();\n          this.closeAddModal();\n        },\n        error: (err) => console.error('Error creating record:', err)\n      });\n    } else {\n      console.log('Form is invalid');\n    }\n  }\n\n  openAddModal(): void {\n    // Clear previous data\n    this.addForm.reset();\n    // Clear form arrays\n    while (this.spmResults.length) { this.spmResults.removeAt(0); }\n    while (this.preUResults.length) { this.preUResults.removeAt(0); }\n    // Optionally add one default row (for SPM is required)\n    this.addSpmResult();\n    // And one for preU (if you want at least one row)\n    this.addPreUResult();\n    this.isAddModalOpen = true;\n  }\n\n  closeAddModal(): void {\n    this.isAddModalOpen = false;\n  }\n\n  deleteApplicant(id: number): void {\n    this.http.delete(`${this.apiUrl}/${id}`).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error deleting record:', err)\n    });\n  }\n\n  createApplicant(newApplicant: Applicants): void {\n    this.http.post<Applicants>(this.apiUrl, newApplicant).subscribe({\n      next: (createdRecord) => {\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error creating record:', err)\n    });\n  }\n\n  updateApplicant(updatedApplicant: Applicants): void {\n    this.http.put(`${this.apiUrl}/${updatedApplicant.id}`, updatedApplicant).subscribe({\n      next: () => {\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error updating record:', err)\n    });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}