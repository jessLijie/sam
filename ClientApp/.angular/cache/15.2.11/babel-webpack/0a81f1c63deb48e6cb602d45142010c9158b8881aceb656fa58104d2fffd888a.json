{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { FormsModule, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nlet ProgramManageComponent = class ProgramManageComponent {\n  constructor(http, cdr, snackBar, fb) {\n    this.http = http;\n    this.cdr = cdr;\n    this.snackBar = snackBar;\n    this.fb = fb;\n    this.isSpecialSelected = false;\n    this.displayedColumns = ['graduate_type', 'requirement', 'grade', 'action'];\n    this.generalRequirement = new MatTableDataSource([]);\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n    this.specialRequirements = {};\n    this.editingRowIndex = null;\n    this.updatedGrade = null;\n    this.editingSpecialRowIndex = null;\n    this.updatedSpecialGrade = null;\n    this.isCreateModalOpen = false;\n    this.faculties = [{\n      value: 'fc',\n      viewValue: 'Faculty of Computing'\n    }, {\n      value: 'fkm',\n      viewValue: 'Faculty of Mechanical Engineering'\n    }, {\n      value: 'fke',\n      viewValue: 'Faculty of Engineering'\n    }];\n    this.programs = {\n      fc: [{\n        code: 'UT6481001',\n        name: 'Software Engineering'\n      }, {\n        code: 'UT6481002',\n        name: 'Data Engineering'\n      }, {\n        code: 'UT6481003',\n        name: 'Bioinformatics'\n      }, {\n        code: 'UT6481004',\n        name: 'Network and Cybersecurity'\n      }, {\n        code: 'UT6481005',\n        name: 'Graphics and Multimedia'\n      }],\n      fkm: [{\n        code: 'UT6521001',\n        name: 'Pure Mechanics'\n      }, {\n        code: 'UT6521003',\n        name: 'Manufacturing'\n      }, {\n        code: 'UT6521004',\n        name: 'Industrial'\n      }, {\n        code: 'UT6525001',\n        name: 'Aerospace'\n      }, {\n        code: 'UT6525002',\n        name: 'Automotive'\n      }, {\n        code: 'UT6525003',\n        name: 'Offshore'\n      }],\n      fke: [{\n        code: 'UT6522002',\n        name: 'Electrical Engineering'\n      }, {\n        code: 'UT6523001',\n        name: 'Electronic Engineering'\n      }, {\n        code: 'UT6523002',\n        name: 'Mechatronics Engineering'\n      }, {\n        code: 'UT6523003',\n        name: 'Biomedical Engineering'\n      }]\n    };\n    this.getGeneralRequirement();\n    this.createForm = this.fb.group({\n      graduate_type: ['', Validators.required],\n      requirement_type: ['', Validators.required],\n      grade: ['', Validators.required],\n      type: ['', Validators.required],\n      faculty: [''],\n      program_code: ['']\n    });\n  }\n  getGeneralRequirement() {\n    this.http.get('https://localhost:7108/api/EntryRequirement/general').subscribe(res => {\n      this.generalRequirement = new MatTableDataSource(res);\n      if (this.sort) {\n        this.generalRequirement.sort = this.sort;\n      }\n      this.cdr.markForCheck();\n    });\n  }\n  ngAfterViewInit() {\n    if (this.sort) {\n      this.generalRequirement.sort = this.sort;\n    }\n  }\n  getSpecialRequirements(programCode) {\n    this.http.get(`https://localhost:7108/api/EntryRequirement/special/${programCode}`).subscribe(data => {\n      this.specialRequirements[programCode] = data;\n      this.cdr.markForCheck();\n    });\n  }\n  startEditing(rowIndex, currentGrade) {\n    this.editingRowIndex = rowIndex;\n    this.updatedGrade = currentGrade;\n  }\n  saveChanges(rowIndex) {\n    const row = this.generalRequirement.data[rowIndex];\n    const updatedRequirement = {\n      id: row.id,\n      grade: this.updatedGrade,\n      subject: row.subject,\n      requirement_type: row.requirement_type,\n      graduate_type: row.graduate_type\n    };\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${row.id}`, updatedRequirement).subscribe(res => {\n      console.log('Update successful:', res);\n      this.snackBar.open('Grade edited successfully!', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      this.generalRequirement.data[rowIndex].grade = this.updatedGrade;\n      this.editingRowIndex = null;\n      this.updatedGrade = null;\n      console.log(this.editingRowIndex, this.updatedGrade);\n      this.cdr.markForCheck();\n    }, err => {\n      console.error('Update failed:', err);\n    });\n  }\n  startEditingSpecial(programCode, rowIndex, currentGrade) {\n    this.editingSpecialRowIndex = rowIndex;\n    this.updatedSpecialGrade = currentGrade;\n  }\n  saveSpecialChanges(programCode, rowIndex) {\n    const specialRequirement = this.specialRequirements[programCode][rowIndex];\n    const updatedRequirement = {\n      ...specialRequirement,\n      grade: this.updatedSpecialGrade\n    };\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${specialRequirement.id}`, updatedRequirement).subscribe(res => {\n      console.log('Special Requirement Update Successful:', res);\n      this.snackBar.open('Grade edited successfully!', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      if (this.updatedSpecialGrade !== null) {\n        this.specialRequirements[programCode][rowIndex].grade = this.updatedSpecialGrade;\n      }\n      this.editingSpecialRowIndex = null;\n      this.updatedSpecialGrade = null;\n      this.cdr.markForCheck();\n    }, err => {\n      console.error('Update failed:', err);\n    });\n  }\n  confirmDelete(id, programCode) {\n    const confirmResult = window.confirm(\"Are you sure you want to delete this entry?\");\n    if (confirmResult) {\n      this.deleteEntryRequirement(id, programCode);\n    }\n  }\n  deleteEntryRequirement(id, programCode) {\n    this.http.delete(`https://localhost:7108/api/EntryRequirement/delete/${id}`, {\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log('Delete successful:', response);\n      this.generalRequirement.data = this.generalRequirement.data.filter(item => item.id !== id);\n      if (programCode) {\n        this.specialRequirements[programCode] = this.specialRequirements[programCode].filter(item => item.id !== id);\n      }\n      this.snackBar.open('Entry requirement deleted successfully!', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      this.cdr.detectChanges();\n    }, error => {\n      console.error('Delete failed:', error);\n      this.snackBar.open('Failed to delete entry requirement.', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n    });\n  }\n  openCreateModal() {\n    this.isCreateModalOpen = true;\n  }\n  closeCreateModal() {\n    this.isCreateModalOpen = false;\n    this.createForm.reset();\n  }\n  submitEntry() {\n    if (this.createForm.invalid) {\n      return;\n    }\n    const entryData = this.createForm.value;\n    console.log('Entry data to submit:', entryData);\n    // If special, include faculty and program code\n    if (entryData.type === 'special') {\n      // Handle special logic here\n    }\n    // Call the API to submit the entry data\n    this.http.post('https://localhost:7108/api/EntryRequirement', entryData).subscribe(res => {\n      this.snackBar.open('Entry requirement created successfully!', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n      this.closeCreateModal();\n    }, err => {\n      console.error('Entry requirement creation failed:', err);\n      this.snackBar.open('Failed to create entry requirement.', 'Close', {\n        duration: 2000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      });\n    });\n  }\n  // Method to change behavior when type is selected as 'special'\n  onTypeChange(event) {\n    if (event.value === 'special') {\n      this.isSpecialSelected = true;\n    } else {\n      this.isSpecialSelected = false;\n    }\n  }\n  clearFilter() {\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n  }\n  getProgramsForFaculty() {\n    return this.selectedFaculty ? this.programs[this.selectedFaculty] : [];\n  }\n  selectProgram(programCode) {\n    this.selectedProgramCode = programCode;\n    this.getSpecialRequirements(programCode);\n  }\n};\n__decorate([ViewChild(MatSort, {\n  static: false\n})], ProgramManageComponent.prototype, \"sort\", void 0);\nProgramManageComponent = __decorate([Component({\n  selector: 'app-program-manage',\n  standalone: true,\n  imports: [CommonModule, MatTableModule, MatSortModule, MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule, MatIconModule, MatExpansionModule, MatButtonModule, MatSnackBarModule, ReactiveFormsModule],\n  templateUrl: './program-manage.component.html',\n  styleUrls: ['./program-manage.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], ProgramManageComponent);\nexport { ProgramManageComponent };","map":{"version":3,"mappings":"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","names":["CommonModule","ChangeDetectionStrategy","Component","ViewChild","FormsModule","Validators","ReactiveFormsModule","MatButtonModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatSelectModule","MatSnackBarModule","MatSort","MatSortModule","MatTableDataSource","MatTableModule","ProgramManageComponent","constructor","http","cdr","snackBar","fb","value","viewValue","fc","code","name","fkm","fke","getGeneralRequirement","createForm","group","graduate_type","required","requirement_type","grade","type","faculty","program_code","get","subscribe","res","generalRequirement","sort","markForCheck","ngAfterViewInit","getSpecialRequirements","programCode","data","specialRequirements","startEditing","rowIndex","currentGrade","editingRowIndex","updatedGrade","saveChanges","row","updatedRequirement","id","subject","put","console","log","open","duration","horizontalPosition","verticalPosition","err","error","startEditingSpecial","editingSpecialRowIndex","updatedSpecialGrade","saveSpecialChanges","specialRequirement","confirmDelete","confirmResult","window","confirm","deleteEntryRequirement","delete","responseType","response","filter","item","detectChanges","openCreateModal","isCreateModalOpen","closeCreateModal","reset","submitEntry","invalid","entryData","post","onTypeChange","event","isSpecialSelected","clearFilter","selectedFaculty","selectedProgramCode","getProgramsForFaculty","programs","selectProgram","__decorate","static","selector","standalone","imports","templateUrl","styleUrls","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\jessm\\OneDrive\\Desktop\\work\\FYP\\sam\\ClientApp\\src\\app\\program-manage\\program-manage.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewChild } from '@angular/core';\nimport { FormsModule, FormBuilder, FormGroup, Validators,ReactiveFormsModule  } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\n\nexport interface Faculty {\n  value: string;\n  viewValue: string;\n}\n\nexport interface Program {\n  code: string;\n  name: string;\n}\n\nexport interface SpecialEntryRequirement {\n  id: number;\n  category: string;\n  requirement: string;\n  grade: string;\n}\n\n\n@Component({\n  selector: 'app-program-manage',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    FormsModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    ReactiveFormsModule\n  ],\n  templateUrl: './program-manage.component.html',\n  styleUrls: ['./program-manage.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProgramManageComponent implements AfterViewInit {\n  constructor(private http: HttpClient,\n    private cdr: ChangeDetectorRef,\n    private snackBar: MatSnackBar,\n    private fb: FormBuilder\n  ) {\n    this.getGeneralRequirement();\n    this.createForm = this.fb.group({\n      graduate_type: ['', Validators.required],\n      requirement_type: ['', Validators.required],\n      grade: ['', Validators.required],\n      type: ['', Validators.required],\n      faculty: [''],\n      program_code: [''],\n    });\n  }\n  createForm: FormGroup;\n  isSpecialSelected: boolean = false;\n  displayedColumns: string[] = ['graduate_type', 'requirement', 'grade', 'action'];\n  generalRequirement: MatTableDataSource<any> = new MatTableDataSource<any>([]);\n  selectedFaculty: string | null = null;\n  selectedProgramCode: string | null = null;\n  specialRequirements: { [programCode: string]: SpecialEntryRequirement[] } = {};\n  editingRowIndex: number | null = null;\n  updatedGrade: string | null = null;\n  editingSpecialRowIndex: number | null = null;\n  updatedSpecialGrade: string | null = null;\n  isCreateModalOpen: boolean = false;\n\n\n  faculties: Faculty[] = [\n    { value: 'fc', viewValue: 'Faculty of Computing' },\n    { value: 'fkm', viewValue: 'Faculty of Mechanical Engineering' },\n    { value: 'fke', viewValue: 'Faculty of Engineering' },\n  ];\n\n  getGeneralRequirement() {\n    this.http.get('https://localhost:7108/api/EntryRequirement/general')\n      .subscribe((res: any) => {\n        this.generalRequirement = new MatTableDataSource(res);\n        if (this.sort) {\n          this.generalRequirement.sort = this.sort;\n        }\n        this.cdr.markForCheck();\n      });\n  }\n\n  @ViewChild(MatSort, { static: false }) sort: MatSort | undefined;\n  ngAfterViewInit() {\n    if (this.sort) {\n      this.generalRequirement.sort = this.sort;\n    }\n  }\n\n\n  getSpecialRequirements(programCode: string) {\n    this.http.get<SpecialEntryRequirement[]>(`https://localhost:7108/api/EntryRequirement/special/${programCode}`)\n      .subscribe((data) => {\n        this.specialRequirements[programCode] = data;\n        this.cdr.markForCheck();\n      });\n  }\n\n  startEditing(rowIndex: number, currentGrade: string) {\n    this.editingRowIndex = rowIndex;\n    this.updatedGrade = currentGrade;\n  }\n\n  saveChanges(rowIndex: number) {\n    const row = this.generalRequirement.data[rowIndex];\n    const updatedRequirement = {\n      id: row.id,\n      grade: this.updatedGrade,\n      subject: row.subject,\n      requirement_type: row.requirement_type,\n      graduate_type: row.graduate_type,\n    };\n\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${row.id}`, updatedRequirement).subscribe(\n      (res) => {\n        console.log('Update successful:', res);\n        this.snackBar.open('Grade edited successfully!', 'Close', {\n          duration: 2000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n        });\n        this.generalRequirement.data[rowIndex].grade = this.updatedGrade;\n        this.editingRowIndex = null;\n        this.updatedGrade = null;\n        console.log(this.editingRowIndex, this.updatedGrade);\n        this.cdr.markForCheck();\n      },\n      (err) => {\n        console.error('Update failed:', err);\n      }\n    );\n  }\n\n  startEditingSpecial(programCode: string, rowIndex: number, currentGrade: string) {\n    this.editingSpecialRowIndex = rowIndex;\n    this.updatedSpecialGrade = currentGrade;\n  }\n\n  saveSpecialChanges(programCode: string, rowIndex: number) {\n    const specialRequirement = this.specialRequirements[programCode][rowIndex];\n    const updatedRequirement = {\n      ...specialRequirement,\n      grade: this.updatedSpecialGrade,\n    };\n\n    this.http.put(`https://localhost:7108/api/EntryRequirement/update/${specialRequirement.id}`, updatedRequirement).subscribe(\n      (res) => {\n        console.log('Special Requirement Update Successful:', res);\n        this.snackBar.open('Grade edited successfully!', 'Close', {\n          duration: 2000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n        });\n        if (this.updatedSpecialGrade !== null) {\n          this.specialRequirements[programCode][rowIndex].grade = this.updatedSpecialGrade;\n        }\n        this.editingSpecialRowIndex = null;\n        this.updatedSpecialGrade = null;\n        this.cdr.markForCheck();\n      },\n      (err) => {\n        console.error('Update failed:', err);\n      }\n    );\n  }\n\n  confirmDelete(id: number,programCode?: string) {\n    const confirmResult = window.confirm(\"Are you sure you want to delete this entry?\");\n    if (confirmResult) {\n      this.deleteEntryRequirement(id,programCode);\n    }\n  }\n\n  deleteEntryRequirement(id: number ,programCode?: string) {\n    this.http.delete(`https://localhost:7108/api/EntryRequirement/delete/${id}`, { responseType: 'text' })\n      .subscribe(\n        (response) => {\n          console.log('Delete successful:', response);\n          this.generalRequirement.data = this.generalRequirement.data.filter(item => item.id !== id);\n          if (programCode) {\n            this.specialRequirements[programCode] = this.specialRequirements[programCode].filter(item => item.id !== id);\n          }\n\n          this.snackBar.open('Entry requirement deleted successfully!', 'Close', {\n            duration: 2000,\n            horizontalPosition: 'right',\n            verticalPosition: 'top',\n          });\n\n          this.cdr.detectChanges();\n        },\n        (error) => {\n          console.error('Delete failed:', error);\n          this.snackBar.open('Failed to delete entry requirement.', 'Close', {\n            duration: 2000,\n            horizontalPosition: 'right',\n            verticalPosition: 'top',\n          });\n        }\n      );\n  }\n\n  openCreateModal() {\n    this.isCreateModalOpen = true;\n  }\n\n  closeCreateModal() {\n    this.isCreateModalOpen = false;\n    this.createForm.reset();\n  }\n\n  submitEntry() {\n    if (this.createForm.invalid) {\n      return;\n    }\n\n    const entryData = this.createForm.value;\n    console.log('Entry data to submit:', entryData);\n\n    // If special, include faculty and program code\n    if (entryData.type === 'special') {\n      // Handle special logic here\n    }\n\n    // Call the API to submit the entry data\n    this.http.post('https://localhost:7108/api/EntryRequirement', entryData).subscribe(\n      (res) => {\n        this.snackBar.open('Entry requirement created successfully!', 'Close', {\n          duration: 2000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n        });\n        this.closeCreateModal();\n      },\n      (err) => {\n        console.error('Entry requirement creation failed:', err);\n        this.snackBar.open('Failed to create entry requirement.', 'Close', {\n          duration: 2000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n        });\n      }\n    );\n  }\n\n  // Method to change behavior when type is selected as 'special'\n  onTypeChange(event: any) {\n    if (event.value === 'special') {\n      this.isSpecialSelected = true;\n    } else {\n      this.isSpecialSelected = false;\n    }\n  }\n\n  clearFilter(): void {\n    this.selectedFaculty = null;\n    this.selectedProgramCode = null;\n  }\n\n  getProgramsForFaculty(): Program[] {\n    return this.selectedFaculty ? this.programs[this.selectedFaculty] : [];\n  }\n\n  selectProgram(programCode: string): void {\n    this.selectedProgramCode = programCode;\n    this.getSpecialRequirements(programCode);\n  }\n\n  programs: { [key: string]: Program[] } = {\n    fc: [\n      { code: 'UT6481001', name: 'Software Engineering' },\n      { code: 'UT6481002', name: 'Data Engineering' },\n      { code: 'UT6481003', name: 'Bioinformatics' },\n      { code: 'UT6481004', name: 'Network and Cybersecurity' },\n      { code: 'UT6481005', name: 'Graphics and Multimedia' },\n    ],\n    fkm: [\n      { code: 'UT6521001', name: 'Pure Mechanics' },\n      { code: 'UT6521003', name: 'Manufacturing' },\n      { code: 'UT6521004', name: 'Industrial' },\n      { code: 'UT6525001', name: 'Aerospace' },\n      { code: 'UT6525002', name: 'Automotive' },\n      { code: 'UT6525003', name: 'Offshore' },\n    ],\n    fke: [\n      { code: 'UT6522002', name: 'Electrical Engineering' },\n      { code: 'UT6523001', name: 'Electronic Engineering' },\n      { code: 'UT6523002', name: 'Mechatronics Engineering' },\n      { code: 'UT6523003', name: 'Biomedical Engineering' },\n    ],\n  };\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}