{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nlet ViewApplicantsComponent = class ViewApplicantsComponent {\n  constructor(http, cdr) {\n    this.http = http;\n    this.cdr = cdr;\n    this.displayedColumns = ['id', 'name', 'pre_u', 'spm_result', 'applied_program', 'action'];\n    this.dataSource = new MatTableDataSource();\n    this.apiUrl = 'http://localhost:7108/api/Application';\n  }\n  ngOnInit() {\n    this.fetchApplicants();\n  }\n  // GET all records from the API.\n  fetchApplicants() {\n    this.http.get(this.apiUrl).subscribe({\n      next: data => {\n        this.dataSource.data = data;\n        this.cdr.markForCheck();\n      },\n      error: err => console.error('Error fetching data:', err)\n    });\n  }\n  // DELETE a record by id.\n  deleteApplicant(id) {\n    this.http.delete(`${this.apiUrl}/${id}`).subscribe({\n      next: () => {\n        // After deletion, refresh the data.\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error deleting record:', err)\n    });\n  }\n  // Example POST: Create a new applicant record.\n  createApplicant(newApplicant) {\n    this.http.post(this.apiUrl, newApplicant).subscribe({\n      next: createdRecord => {\n        // Optionally update your dataSource with the new record.\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error creating record:', err)\n    });\n  }\n  // Example PUT: Update an existing record.\n  updateApplicant(updatedApplicant) {\n    this.http.put(`${this.apiUrl}/${updatedApplicant.id}`, updatedApplicant).subscribe({\n      next: () => {\n        // Refresh the data after updating.\n        this.fetchApplicants();\n      },\n      error: err => console.error('Error updating record:', err)\n    });\n  }\n};\nViewApplicantsComponent = __decorate([Component({\n  selector: 'app-view-applicants',\n  standalone: true,\n  templateUrl: './view-applicants.component.html',\n  styleUrls: ['./view-applicants.component.css'],\n  imports: [MatIconModule, MatTableModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], ViewApplicantsComponent);\nexport { ViewApplicantsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAUC,uBAAuB,QAA2B,eAAe;AAE7F,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,SAASC,aAAa,QAAQ,wBAAwB;AAsB/C,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAMlCC,YAAoBC,IAAgB,EAAUC,GAAsB;IAAhD,SAAI,GAAJD,IAAI;IAAsB,QAAG,GAAHC,GAAG;IALjD,qBAAgB,GAAa,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,iBAAiB,EAAE,QAAQ,CAAC;IAC/F,eAAU,GAAG,IAAIL,kBAAkB,EAAc;IAEzC,WAAM,GAAG,uCAAuC;EAEe;EAEvEM,QAAQ;IACN,IAAI,CAACC,eAAe,EAAE;EACxB;EAEA;EACAA,eAAe;IACb,IAAI,CAACH,IAAI,CAACI,GAAG,CAAe,IAAI,CAACC,MAAM,CAAC,CAACC,SAAS,CAAC;MACjDC,IAAI,EAAGC,IAAkB,IAAI;QAC3B,IAAI,CAACC,UAAU,CAACD,IAAI,GAAGA,IAAI;QAC3B,IAAI,CAACP,GAAG,CAACS,YAAY,EAAE;MACzB,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEC,GAAG;KAC1D,CAAC;EACJ;EAEA;EACAE,eAAe,CAACC,EAAU;IACxB,IAAI,CAACf,IAAI,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACX,MAAM,IAAIU,EAAE,EAAE,CAAC,CAACT,SAAS,CAAC;MACjDC,IAAI,EAAE,MAAK;QACT;QACA,IAAI,CAACJ,eAAe,EAAE;MACxB,CAAC;MACDQ,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEC,GAAG;KAC5D,CAAC;EACJ;EAEA;EACAK,eAAe,CAACC,YAAwB;IACtC,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAa,IAAI,CAACd,MAAM,EAAEa,YAAY,CAAC,CAACZ,SAAS,CAAC;MAC9DC,IAAI,EAAGa,aAAa,IAAI;QACtB;QACA,IAAI,CAACjB,eAAe,EAAE;MACxB,CAAC;MACDQ,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEC,GAAG;KAC5D,CAAC;EACJ;EAEA;EACAS,eAAe,CAACC,gBAA4B;IAC1C,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAAC,GAAG,IAAI,CAAClB,MAAM,IAAIiB,gBAAgB,CAACP,EAAE,EAAE,EAAEO,gBAAgB,CAAC,CAAChB,SAAS,CAAC;MACjFC,IAAI,EAAE,MAAK;QACT;QACA,IAAI,CAACJ,eAAe,EAAE;MACxB,CAAC;MACDQ,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEC,GAAG;KAC5D,CAAC;EACJ;CAGD;AAzDYd,uBAAuB,eAZnCJ,SAAS,CAAC;EACT8B,QAAQ,EAAE,qBAAqB;EAC/BC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC,CAAC;EAC9CC,OAAO,EAAC,CACN/B,aAAa,EACTgC,cAAc,CAEnB;EACDC,eAAe,EAAEnC,uBAAuB,CAACoC;CAC1C,CAAC,GACWjC,uBAAuB,CAyDnC;SAzDYA,uBAAuB","names":["Component","ChangeDetectionStrategy","MatTableDataSource","MatIconModule","ViewApplicantsComponent","constructor","http","cdr","ngOnInit","fetchApplicants","get","apiUrl","subscribe","next","data","dataSource","markForCheck","error","err","console","deleteApplicant","id","delete","createApplicant","newApplicant","post","createdRecord","updateApplicant","updatedApplicant","put","selector","standalone","templateUrl","styleUrls","imports","MatTableModule","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\jessm\\OneDrive\\Desktop\\work\\FYP\\sam\\ClientApp\\src\\app\\view-applicants\\view-applicants.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\n\nexport interface Applicants {\n  id: number;\n  name: string;\n  pre_u: string;\n  spm_result: string;\n  applied_program: string;\n}\n\n@Component({\n  selector: 'app-view-applicants',\n  standalone: true,\n  templateUrl: './view-applicants.component.html',\n  styleUrls: ['./view-applicants.component.css'],\n  imports:[\n    MatIconModule,\n        MatTableModule,\n    \n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewApplicantsComponent implements OnInit {\n  displayedColumns: string[] = ['id', 'name', 'pre_u', 'spm_result', 'applied_program', 'action'];\n  dataSource = new MatTableDataSource<Applicants>();\n\n  private apiUrl = 'http://localhost:7108/api/Application';\n\n  constructor(private http: HttpClient, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.fetchApplicants();\n  }\n\n  // GET all records from the API.\n  fetchApplicants(): void {\n    this.http.get<Applicants[]>(this.apiUrl).subscribe({\n      next: (data: Applicants[]) => {\n        this.dataSource.data = data;\n        this.cdr.markForCheck();\n      },\n      error: (err) => console.error('Error fetching data:', err)\n    });\n  }\n\n  // DELETE a record by id.\n  deleteApplicant(id: number): void {\n    this.http.delete(`${this.apiUrl}/${id}`).subscribe({\n      next: () => {\n        // After deletion, refresh the data.\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error deleting record:', err)\n    });\n  }\n\n  // Example POST: Create a new applicant record.\n  createApplicant(newApplicant: Applicants): void {\n    this.http.post<Applicants>(this.apiUrl, newApplicant).subscribe({\n      next: (createdRecord) => {\n        // Optionally update your dataSource with the new record.\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error creating record:', err)\n    });\n  }\n\n  // Example PUT: Update an existing record.\n  updateApplicant(updatedApplicant: Applicants): void {\n    this.http.put(`${this.apiUrl}/${updatedApplicant.id}`, updatedApplicant).subscribe({\n      next: () => {\n        // Refresh the data after updating.\n        this.fetchApplicants();\n      },\n      error: (err) => console.error('Error updating record:', err)\n    });\n  }\n\n  // Additional methods to open modals or view JSON details can be implemented here.\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}